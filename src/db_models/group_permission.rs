// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]

use derive_builder::WebApiGen;
use diesel::{AsChangeset, Identifiable, Insertable, Queryable, Selectable};
use schemars::JsonSchema;
use serde::{Deserialize, Serialize};



#[derive(
    Queryable,
    Debug,
    Identifiable,
    Selectable,
    // WebApiGen,
    Serialize,
    Deserialize,
    JsonSchema,
    Default,
    Insertable
)]
#[diesel(primary_key(group_id, permission_id))]
#[diesel(table_name = crate::schema::groups_permissions)]
#[diesel(check_for_backend(super::DbType))]
pub struct GroupsPermission {
    pub group_id: i64,
    pub permission_id: i64,
}

#[allow(clippy::all)]
#[derive(Deserialize, Serialize, JsonSchema, Default, Clone)]
pub struct GroupsPermissionBuilder {
    pub group_id: ::derive_builder::export::core::option::Option<Filter<i64>>,
    pub permission_id: ::derive_builder::export::core::option::Option<Filter<i64>>,
}
use crate::api_auth::login_impl::AuthBackend;
use crate::api_doc::{default_resp_docs, empty_resp_docs};
use crate::controller::Compare;
use crate::controller::Filter;
use crate::controller::LOGIN_URL;
use crate::schema::groups_permissions::dsl::groups_permissions;
use aide::axum::routing::{delete_with, get_with, post_with, put_with};
use aide::axum::ApiRouter;
use axum::extract::Path;
use axum_login::permission_required;
use diesel::r2d2::{ConnectionManager, Pool};
